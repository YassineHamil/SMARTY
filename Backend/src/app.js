// Point d'entr√©e principal de l'application
const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const compression = require('compression');
require('dotenv').config();

// Importation des modules
const { connectDatabase, disconnectDatabase } = require('./infrastructure/database/mongodb');
const { initializeRoutes } = require('./infrastructure/web/routes');
const { setupMiddlewares } = require('./infrastructure/web/middlewares');

const app = express();
const PORT = process.env.PORT || 3000;

async function startApplication() {
  try {
    // Configuration des middlewares globaux
    app.use(helmet());
    app.use(compression());
    app.use(cors());
    app.use(express.json({ limit: '10mb' }));
    app.use(express.urlencoded({ extended: true }));

    // Configuration des middlewares personnalis√©s
    setupMiddlewares(app);

    // Connexion aux bases de donn√©es
    await connectDatabase();

    // Configuration des routes
    initializeRoutes(app);

    // D√©marrage du serveur
    const server = app.listen(PORT, () => {
      console.log(`üöÄ Serveur d√©marr√© sur le port ${PORT}`);
    });



   // Gestion de l'arr√™t gracieux
    process.on('SIGTERM', async () => {
      console.log('üõë Signal SIGTERM re√ßu, arr√™t gracieux...');
      
      // Arr√™ter d'accepter de nouvelles connexions
      server.close(async () => {
        console.log('‚úÖ Serveur HTTP ferm√©');       
        
        // Fermer la base de donn√©es
        await disconnectDatabase();
        
        console.log('‚úÖ Arr√™t gracieux termin√©');
        process.exit(0);
      });
      
      // Timeout de s√©curit√© (force l'arr√™t apr√®s 30s)
      setTimeout(() => {
        console.error('‚ö†Ô∏è Timeout atteint, arr√™t forc√©');
        process.exit(1);
      }, 30000);
    });

  } catch (error) {
    console.error('‚ùå Erreur lors du d√©marrage:', error);
    process.exit(1);
  }
}

startApplication(); 